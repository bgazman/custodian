/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AddMembership200,
  AddMembership500,
  AddMembershipParams,
  GetGroupsForUser200,
  GetGroupsForUser500,
  GetUsersInGroup200,
  GetUsersInGroup500,
  RemoveMembership200,
  RemoveMembership500,
  RemoveMembershipParams,
  UpdateRole1200,
  UpdateRole1500,
  UpdateRole1Params
} from '../index.schemas'
import { customFetcher } from '../../common/SecureApiClient';



export const updateRole1 = (
    params: UpdateRole1Params,
 ) => {
      
      
      return customFetcher<UpdateRole1200>(
      {url: `http://localhost:8080/api/group-memberships`, method: 'PUT',
        params
    },
      );
    }
  


export const getUpdateRole1MutationOptions = <TData = Awaited<ReturnType<typeof updateRole1>>, TError = UpdateRole1500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: UpdateRole1Params}, TContext>, }
) => {
const mutationKey = ['updateRole1'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRole1>>, {params: UpdateRole1Params}> = (props) => {
          const {params} = props ?? {};

          return  updateRole1(params,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{params: UpdateRole1Params}, TContext>}

    export type UpdateRole1MutationResult = NonNullable<Awaited<ReturnType<typeof updateRole1>>>
    
    export type UpdateRole1MutationError = UpdateRole1500

    export const useUpdateRole1 = <TData = Awaited<ReturnType<typeof updateRole1>>, TError = UpdateRole1500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: UpdateRole1Params}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {params: UpdateRole1Params},
        TContext
      > => {

      const mutationOptions = getUpdateRole1MutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const addMembership = (
    params: AddMembershipParams,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<AddMembership200>(
      {url: `http://localhost:8080/api/group-memberships`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getAddMembershipMutationOptions = <TData = Awaited<ReturnType<typeof addMembership>>, TError = AddMembership500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: AddMembershipParams}, TContext>, }
) => {
const mutationKey = ['addMembership'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addMembership>>, {params: AddMembershipParams}> = (props) => {
          const {params} = props ?? {};

          return  addMembership(params,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{params: AddMembershipParams}, TContext>}

    export type AddMembershipMutationResult = NonNullable<Awaited<ReturnType<typeof addMembership>>>
    
    export type AddMembershipMutationError = AddMembership500

    export const useAddMembership = <TData = Awaited<ReturnType<typeof addMembership>>, TError = AddMembership500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: AddMembershipParams}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {params: AddMembershipParams},
        TContext
      > => {

      const mutationOptions = getAddMembershipMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const removeMembership = (
    params: RemoveMembershipParams,
 ) => {
      
      
      return customFetcher<RemoveMembership200>(
      {url: `http://localhost:8080/api/group-memberships`, method: 'DELETE',
        params
    },
      );
    }
  


export const getRemoveMembershipMutationOptions = <TData = Awaited<ReturnType<typeof removeMembership>>, TError = RemoveMembership500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: RemoveMembershipParams}, TContext>, }
) => {
const mutationKey = ['removeMembership'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeMembership>>, {params: RemoveMembershipParams}> = (props) => {
          const {params} = props ?? {};

          return  removeMembership(params,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{params: RemoveMembershipParams}, TContext>}

    export type RemoveMembershipMutationResult = NonNullable<Awaited<ReturnType<typeof removeMembership>>>
    
    export type RemoveMembershipMutationError = RemoveMembership500

    export const useRemoveMembership = <TData = Awaited<ReturnType<typeof removeMembership>>, TError = RemoveMembership500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: RemoveMembershipParams}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {params: RemoveMembershipParams},
        TContext
      > => {

      const mutationOptions = getRemoveMembershipMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getGroupsForUser = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetGroupsForUser200>(
      {url: `http://localhost:8080/api/group-memberships/user/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetGroupsForUserQueryKey = (userId: number,) => {
    return [`http://localhost:8080/api/group-memberships/user/${userId}`] as const;
    }

    
export const getGetGroupsForUserInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForUser>>>, TError = GetGroupsForUser500>(userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupsForUserQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsForUser>>> = ({ signal }) => getGroupsForUser(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGroupsForUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupsForUser>>>
export type GetGroupsForUserInfiniteQueryError = GetGroupsForUser500


export function useGetGroupsForUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForUser>>>, TError = GetGroupsForUser500>(
 userId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsForUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupsForUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForUser>>>, TError = GetGroupsForUser500>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsForUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupsForUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForUser>>>, TError = GetGroupsForUser500>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetGroupsForUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForUser>>>, TError = GetGroupsForUser500>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGroupsForUserInfiniteQueryOptions(userId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGroupsForUserQueryOptions = <TData = Awaited<ReturnType<typeof getGroupsForUser>>, TError = GetGroupsForUser500>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupsForUserQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsForUser>>> = ({ signal }) => getGroupsForUser(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGroupsForUserQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupsForUser>>>
export type GetGroupsForUserQueryError = GetGroupsForUser500


export function useGetGroupsForUser<TData = Awaited<ReturnType<typeof getGroupsForUser>>, TError = GetGroupsForUser500>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsForUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupsForUser<TData = Awaited<ReturnType<typeof getGroupsForUser>>, TError = GetGroupsForUser500>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsForUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupsForUser<TData = Awaited<ReturnType<typeof getGroupsForUser>>, TError = GetGroupsForUser500>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetGroupsForUser<TData = Awaited<ReturnType<typeof getGroupsForUser>>, TError = GetGroupsForUser500>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGroupsForUserQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUsersInGroup = (
    groupId: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetUsersInGroup200>(
      {url: `http://localhost:8080/api/group-memberships/group/${groupId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUsersInGroupQueryKey = (groupId: number,) => {
    return [`http://localhost:8080/api/group-memberships/group/${groupId}`] as const;
    }

    
export const getGetUsersInGroupInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUsersInGroup>>>, TError = GetUsersInGroup500>(groupId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersInGroupQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersInGroup>>> = ({ signal }) => getUsersInGroup(groupId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersInGroupInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersInGroup>>>
export type GetUsersInGroupInfiniteQueryError = GetUsersInGroup500


export function useGetUsersInGroupInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsersInGroup>>>, TError = GetUsersInGroup500>(
 groupId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersInGroup>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersInGroupInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsersInGroup>>>, TError = GetUsersInGroup500>(
 groupId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersInGroup>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersInGroupInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsersInGroup>>>, TError = GetUsersInGroup500>(
 groupId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUsersInGroupInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsersInGroup>>>, TError = GetUsersInGroup500>(
 groupId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersInGroupInfiniteQueryOptions(groupId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUsersInGroupQueryOptions = <TData = Awaited<ReturnType<typeof getUsersInGroup>>, TError = GetUsersInGroup500>(groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersInGroupQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersInGroup>>> = ({ signal }) => getUsersInGroup(groupId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersInGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersInGroup>>>
export type GetUsersInGroupQueryError = GetUsersInGroup500


export function useGetUsersInGroup<TData = Awaited<ReturnType<typeof getUsersInGroup>>, TError = GetUsersInGroup500>(
 groupId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersInGroup>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersInGroup<TData = Awaited<ReturnType<typeof getUsersInGroup>>, TError = GetUsersInGroup500>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersInGroup>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersInGroup<TData = Awaited<ReturnType<typeof getUsersInGroup>>, TError = GetUsersInGroup500>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUsersInGroup<TData = Awaited<ReturnType<typeof getUsersInGroup>>, TError = GetUsersInGroup500>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsersInGroup>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersInGroupQueryOptions(groupId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



