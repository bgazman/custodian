/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  InitiateMfa200,
  InitiateMfa500,
  MfaRequest,
  ResendCode200,
  ResendCode500,
  VerifyBackupCode200,
  VerifyBackupCode500,
  VerifyMfa200,
  VerifyMfa500
} from '.././model'
import { customFetcher } from '../../common/SecureApiClient';



export const verifyMfa = (
    mfaRequest: MfaRequest,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<VerifyMfa200>(
      {url: `http://localhost:8080/mfa/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mfaRequest, signal
    },
      );
    }
  


export const getVerifyMfaMutationOptions = <TData = Awaited<ReturnType<typeof verifyMfa>>, TError = VerifyMfa500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>, }
) => {
const mutationKey = ['verifyMfa'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyMfa>>, {data: MfaRequest}> = (props) => {
          const {data} = props ?? {};

          return  verifyMfa(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>}

    export type VerifyMfaMutationResult = NonNullable<Awaited<ReturnType<typeof verifyMfa>>>
    export type VerifyMfaMutationBody = MfaRequest
    export type VerifyMfaMutationError = VerifyMfa500

    export const useVerifyMfa = <TData = Awaited<ReturnType<typeof verifyMfa>>, TError = VerifyMfa500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: MfaRequest},
        TContext
      > => {

      const mutationOptions = getVerifyMfaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const verifyBackupCode = (
    mfaRequest: MfaRequest,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<VerifyBackupCode200>(
      {url: `http://localhost:8080/mfa/verify-backup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mfaRequest, signal
    },
      );
    }
  


export const getVerifyBackupCodeMutationOptions = <TData = Awaited<ReturnType<typeof verifyBackupCode>>, TError = VerifyBackupCode500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>, }
) => {
const mutationKey = ['verifyBackupCode'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyBackupCode>>, {data: MfaRequest}> = (props) => {
          const {data} = props ?? {};

          return  verifyBackupCode(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>}

    export type VerifyBackupCodeMutationResult = NonNullable<Awaited<ReturnType<typeof verifyBackupCode>>>
    export type VerifyBackupCodeMutationBody = MfaRequest
    export type VerifyBackupCodeMutationError = VerifyBackupCode500

    export const useVerifyBackupCode = <TData = Awaited<ReturnType<typeof verifyBackupCode>>, TError = VerifyBackupCode500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: MfaRequest},
        TContext
      > => {

      const mutationOptions = getVerifyBackupCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const resendCode = (
    mfaRequest: MfaRequest,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<ResendCode200>(
      {url: `http://localhost:8080/mfa/resend`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mfaRequest, signal
    },
      );
    }
  


export const getResendCodeMutationOptions = <TData = Awaited<ReturnType<typeof resendCode>>, TError = ResendCode500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>, }
) => {
const mutationKey = ['resendCode'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resendCode>>, {data: MfaRequest}> = (props) => {
          const {data} = props ?? {};

          return  resendCode(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>}

    export type ResendCodeMutationResult = NonNullable<Awaited<ReturnType<typeof resendCode>>>
    export type ResendCodeMutationBody = MfaRequest
    export type ResendCodeMutationError = ResendCode500

    export const useResendCode = <TData = Awaited<ReturnType<typeof resendCode>>, TError = ResendCode500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: MfaRequest},
        TContext
      > => {

      const mutationOptions = getResendCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const initiateMfa = (
    mfaRequest: MfaRequest,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<InitiateMfa200>(
      {url: `http://localhost:8080/mfa/initiate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mfaRequest, signal
    },
      );
    }
  


export const getInitiateMfaMutationOptions = <TData = Awaited<ReturnType<typeof initiateMfa>>, TError = InitiateMfa500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>, }
) => {
const mutationKey = ['initiateMfa'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initiateMfa>>, {data: MfaRequest}> = (props) => {
          const {data} = props ?? {};

          return  initiateMfa(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>}

    export type InitiateMfaMutationResult = NonNullable<Awaited<ReturnType<typeof initiateMfa>>>
    export type InitiateMfaMutationBody = MfaRequest
    export type InitiateMfaMutationError = InitiateMfa500

    export const useInitiateMfa = <TData = Awaited<ReturnType<typeof initiateMfa>>, TError = InitiateMfa500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: MfaRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: MfaRequest},
        TContext
      > => {

      const mutationOptions = getInitiateMfaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    