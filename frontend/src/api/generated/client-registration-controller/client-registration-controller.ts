/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  ClientRegistrationRequest,
  RegisterClient200,
  RegisterClient500
} from '../index.schemas'
import { customFetcher } from '../../common/SecureApiClient';



export const registerClient = (
    clientRegistrationRequest: ClientRegistrationRequest,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<RegisterClient200>(
      {url: `http://localhost:8080/client/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: clientRegistrationRequest, signal
    },
      );
    }
  


export const getRegisterClientMutationOptions = <TData = Awaited<ReturnType<typeof registerClient>>, TError = RegisterClient500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: ClientRegistrationRequest}, TContext>, }
) => {
const mutationKey = ['registerClient'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerClient>>, {data: ClientRegistrationRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerClient(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: ClientRegistrationRequest}, TContext>}

    export type RegisterClientMutationResult = NonNullable<Awaited<ReturnType<typeof registerClient>>>
    export type RegisterClientMutationBody = ClientRegistrationRequest
    export type RegisterClientMutationError = RegisterClient500

    export const useRegisterClient = <TData = Awaited<ReturnType<typeof registerClient>>, TError = RegisterClient500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: ClientRegistrationRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: ClientRegistrationRequest},
        TContext
      > => {

      const mutationOptions = getRegisterClientMutationOptions(options);

      return useMutation(mutationOptions);
    }
    