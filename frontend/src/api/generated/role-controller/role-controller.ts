/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateRole200,
  CreateRole500,
  DeleteRole200,
  DeleteRole500,
  GetAllRoles200,
  GetAllRoles500,
  GetRoleById200,
  GetRoleById500,
  Role,
  SearchRoles200,
  SearchRoles500,
  SearchRolesParams,
  UpdateRole200,
  UpdateRole500
} from '../index.schemas'
import { customFetcher } from '../../common/SecureApiClient';



export const getRoleById = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetRoleById200>(
      {url: `http://localhost:8080/api/secure/roles/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetRoleByIdQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/secure/roles/${id}`] as const;
    }

    
export const getGetRoleByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getRoleById>>>, TError = GetRoleById500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoleByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoleById>>> = ({ signal }) => getRoleById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoleByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getRoleById>>>
export type GetRoleByIdInfiniteQueryError = GetRoleById500


export function useGetRoleByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoleById>>>, TError = GetRoleById500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoleById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoleByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoleById>>>, TError = GetRoleById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoleById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoleByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoleById>>>, TError = GetRoleById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRoleByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getRoleById>>>, TError = GetRoleById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoleByIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetRoleByIdQueryOptions = <TData = Awaited<ReturnType<typeof getRoleById>>, TError = GetRoleById500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoleByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoleById>>> = ({ signal }) => getRoleById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoleByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRoleById>>>
export type GetRoleByIdQueryError = GetRoleById500


export function useGetRoleById<TData = Awaited<ReturnType<typeof getRoleById>>, TError = GetRoleById500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoleById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoleById<TData = Awaited<ReturnType<typeof getRoleById>>, TError = GetRoleById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRoleById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRoleById<TData = Awaited<ReturnType<typeof getRoleById>>, TError = GetRoleById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRoleById<TData = Awaited<ReturnType<typeof getRoleById>>, TError = GetRoleById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRoleById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoleByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateRole = (
    id: number,
    role: Role,
 ) => {
      
      
      return customFetcher<UpdateRole200>(
      {url: `http://localhost:8080/api/secure/roles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: role
    },
      );
    }
  


export const getUpdateRoleMutationOptions = <TData = Awaited<ReturnType<typeof updateRole>>, TError = UpdateRole500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: Role}, TContext>, }
) => {
const mutationKey = ['updateRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRole>>, {id: number;data: Role}> = (props) => {
          const {id,data} = props ?? {};

          return  updateRole(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number;data: Role}, TContext>}

    export type UpdateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof updateRole>>>
    export type UpdateRoleMutationBody = Role
    export type UpdateRoleMutationError = UpdateRole500

    export const useUpdateRole = <TData = Awaited<ReturnType<typeof updateRole>>, TError = UpdateRole500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: Role}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number;data: Role},
        TContext
      > => {

      const mutationOptions = getUpdateRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteRole = (
    id: number,
 ) => {
      
      
      return customFetcher<DeleteRole200>(
      {url: `http://localhost:8080/api/secure/roles/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteRoleMutationOptions = <TData = Awaited<ReturnType<typeof deleteRole>>, TError = DeleteRole500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
) => {
const mutationKey = ['deleteRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRole>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteRole(id,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number}, TContext>}

    export type DeleteRoleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRole>>>
    
    export type DeleteRoleMutationError = DeleteRole500

    export const useDeleteRole = <TData = Awaited<ReturnType<typeof deleteRole>>, TError = DeleteRole500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getAllRoles = (
    
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetAllRoles200>(
      {url: `http://localhost:8080/api/secure/roles`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllRolesQueryKey = () => {
    return [`http://localhost:8080/api/secure/roles`] as const;
    }

    
export const getGetAllRolesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllRoles>>>, TError = GetAllRoles500>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllRolesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRoles>>> = ({ signal }) => getAllRoles(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllRolesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRoles>>>
export type GetAllRolesInfiniteQueryError = GetAllRoles500


export function useGetAllRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllRoles>>>, TError = GetAllRoles500>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllRoles>>>, TError = GetAllRoles500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllRoles>>>, TError = GetAllRoles500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllRoles>>>, TError = GetAllRoles500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllRolesInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllRolesQueryOptions = <TData = Awaited<ReturnType<typeof getAllRoles>>, TError = GetAllRoles500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllRolesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRoles>>> = ({ signal }) => getAllRoles(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRoles>>>
export type GetAllRolesQueryError = GetAllRoles500


export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = GetAllRoles500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = GetAllRoles500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = GetAllRoles500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = GetAllRoles500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllRolesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createRole = (
    role: Role,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<CreateRole200>(
      {url: `http://localhost:8080/api/secure/roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: role, signal
    },
      );
    }
  


export const getCreateRoleMutationOptions = <TData = Awaited<ReturnType<typeof createRole>>, TError = CreateRole500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: Role}, TContext>, }
) => {
const mutationKey = ['createRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRole>>, {data: Role}> = (props) => {
          const {data} = props ?? {};

          return  createRole(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: Role}, TContext>}

    export type CreateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof createRole>>>
    export type CreateRoleMutationBody = Role
    export type CreateRoleMutationError = CreateRole500

    export const useCreateRole = <TData = Awaited<ReturnType<typeof createRole>>, TError = CreateRole500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: Role}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: Role},
        TContext
      > => {

      const mutationOptions = getCreateRoleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const searchRoles = (
    params: SearchRolesParams,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<SearchRoles200>(
      {url: `http://localhost:8080/api/secure/roles/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchRolesQueryKey = (params: SearchRolesParams,) => {
    return [`http://localhost:8080/api/secure/roles/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchRolesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchRoles>>>, TError = SearchRoles500>(params: SearchRolesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchRoles>>> = ({ signal }) => searchRoles(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchRolesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchRoles>>>
export type SearchRolesInfiniteQueryError = SearchRoles500


export function useSearchRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchRoles>>>, TError = SearchRoles500>(
 params: SearchRolesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchRoles>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchRoles>>>, TError = SearchRoles500>(
 params: SearchRolesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchRoles>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchRoles>>>, TError = SearchRoles500>(
 params: SearchRolesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchRolesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchRoles>>>, TError = SearchRoles500>(
 params: SearchRolesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchRolesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchRolesQueryOptions = <TData = Awaited<ReturnType<typeof searchRoles>>, TError = SearchRoles500>(params: SearchRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchRoles>>> = ({ signal }) => searchRoles(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchRolesQueryResult = NonNullable<Awaited<ReturnType<typeof searchRoles>>>
export type SearchRolesQueryError = SearchRoles500


export function useSearchRoles<TData = Awaited<ReturnType<typeof searchRoles>>, TError = SearchRoles500>(
 params: SearchRolesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchRoles>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchRoles<TData = Awaited<ReturnType<typeof searchRoles>>, TError = SearchRoles500>(
 params: SearchRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchRoles>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchRoles<TData = Awaited<ReturnType<typeof searchRoles>>, TError = SearchRoles500>(
 params: SearchRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchRoles<TData = Awaited<ReturnType<typeof searchRoles>>, TError = SearchRoles500>(
 params: SearchRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchRolesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



