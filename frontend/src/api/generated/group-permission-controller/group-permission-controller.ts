/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AddPermissionToGroup200,
  AddPermissionToGroup500,
  AddPermissionToGroupParams,
  GetGroupsForPermission200,
  GetGroupsForPermission500,
  GetPermissionsForGroup200,
  GetPermissionsForGroup500,
  RemovePermissionFromGroup200,
  RemovePermissionFromGroup500,
  RemovePermissionFromGroupParams
} from '../index.schemas'
import { customFetcher } from '../../common/SecureApiClient';



export const addPermissionToGroup = (
    params: AddPermissionToGroupParams,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<AddPermissionToGroup200>(
      {url: `http://localhost:8080/api/secure/group-permissions`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getAddPermissionToGroupMutationOptions = <TData = Awaited<ReturnType<typeof addPermissionToGroup>>, TError = AddPermissionToGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: AddPermissionToGroupParams}, TContext>, }
) => {
const mutationKey = ['addPermissionToGroup'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPermissionToGroup>>, {params: AddPermissionToGroupParams}> = (props) => {
          const {params} = props ?? {};

          return  addPermissionToGroup(params,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{params: AddPermissionToGroupParams}, TContext>}

    export type AddPermissionToGroupMutationResult = NonNullable<Awaited<ReturnType<typeof addPermissionToGroup>>>
    
    export type AddPermissionToGroupMutationError = AddPermissionToGroup500

    export const useAddPermissionToGroup = <TData = Awaited<ReturnType<typeof addPermissionToGroup>>, TError = AddPermissionToGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: AddPermissionToGroupParams}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {params: AddPermissionToGroupParams},
        TContext
      > => {

      const mutationOptions = getAddPermissionToGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const removePermissionFromGroup = (
    params: RemovePermissionFromGroupParams,
 ) => {
      
      
      return customFetcher<RemovePermissionFromGroup200>(
      {url: `http://localhost:8080/api/secure/group-permissions`, method: 'DELETE',
        params
    },
      );
    }
  


export const getRemovePermissionFromGroupMutationOptions = <TData = Awaited<ReturnType<typeof removePermissionFromGroup>>, TError = RemovePermissionFromGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: RemovePermissionFromGroupParams}, TContext>, }
) => {
const mutationKey = ['removePermissionFromGroup'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removePermissionFromGroup>>, {params: RemovePermissionFromGroupParams}> = (props) => {
          const {params} = props ?? {};

          return  removePermissionFromGroup(params,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{params: RemovePermissionFromGroupParams}, TContext>}

    export type RemovePermissionFromGroupMutationResult = NonNullable<Awaited<ReturnType<typeof removePermissionFromGroup>>>
    
    export type RemovePermissionFromGroupMutationError = RemovePermissionFromGroup500

    export const useRemovePermissionFromGroup = <TData = Awaited<ReturnType<typeof removePermissionFromGroup>>, TError = RemovePermissionFromGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: RemovePermissionFromGroupParams}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {params: RemovePermissionFromGroupParams},
        TContext
      > => {

      const mutationOptions = getRemovePermissionFromGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getGroupsForPermission = (
    permissionId: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetGroupsForPermission200>(
      {url: `http://localhost:8080/api/secure/group-permissions/permission/${permissionId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetGroupsForPermissionQueryKey = (permissionId: number,) => {
    return [`http://localhost:8080/api/secure/group-permissions/permission/${permissionId}`] as const;
    }

    
export const getGetGroupsForPermissionInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForPermission>>>, TError = GetGroupsForPermission500>(permissionId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupsForPermissionQueryKey(permissionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsForPermission>>> = ({ signal }) => getGroupsForPermission(permissionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(permissionId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGroupsForPermissionInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupsForPermission>>>
export type GetGroupsForPermissionInfiniteQueryError = GetGroupsForPermission500


export function useGetGroupsForPermissionInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForPermission>>>, TError = GetGroupsForPermission500>(
 permissionId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsForPermission>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupsForPermissionInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForPermission>>>, TError = GetGroupsForPermission500>(
 permissionId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsForPermission>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupsForPermissionInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForPermission>>>, TError = GetGroupsForPermission500>(
 permissionId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetGroupsForPermissionInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupsForPermission>>>, TError = GetGroupsForPermission500>(
 permissionId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGroupsForPermissionInfiniteQueryOptions(permissionId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGroupsForPermissionQueryOptions = <TData = Awaited<ReturnType<typeof getGroupsForPermission>>, TError = GetGroupsForPermission500>(permissionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupsForPermissionQueryKey(permissionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsForPermission>>> = ({ signal }) => getGroupsForPermission(permissionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(permissionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGroupsForPermissionQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupsForPermission>>>
export type GetGroupsForPermissionQueryError = GetGroupsForPermission500


export function useGetGroupsForPermission<TData = Awaited<ReturnType<typeof getGroupsForPermission>>, TError = GetGroupsForPermission500>(
 permissionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsForPermission>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupsForPermission<TData = Awaited<ReturnType<typeof getGroupsForPermission>>, TError = GetGroupsForPermission500>(
 permissionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupsForPermission>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupsForPermission<TData = Awaited<ReturnType<typeof getGroupsForPermission>>, TError = GetGroupsForPermission500>(
 permissionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetGroupsForPermission<TData = Awaited<ReturnType<typeof getGroupsForPermission>>, TError = GetGroupsForPermission500>(
 permissionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupsForPermission>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGroupsForPermissionQueryOptions(permissionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPermissionsForGroup = (
    groupId: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetPermissionsForGroup200>(
      {url: `http://localhost:8080/api/secure/group-permissions/group/${groupId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetPermissionsForGroupQueryKey = (groupId: number,) => {
    return [`http://localhost:8080/api/secure/group-permissions/group/${groupId}`] as const;
    }

    
export const getGetPermissionsForGroupInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getPermissionsForGroup>>>, TError = GetPermissionsForGroup500>(groupId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPermissionsForGroupQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermissionsForGroup>>> = ({ signal }) => getPermissionsForGroup(groupId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPermissionsForGroupInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPermissionsForGroup>>>
export type GetPermissionsForGroupInfiniteQueryError = GetPermissionsForGroup500


export function useGetPermissionsForGroupInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPermissionsForGroup>>>, TError = GetPermissionsForGroup500>(
 groupId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionsForGroup>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionsForGroupInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPermissionsForGroup>>>, TError = GetPermissionsForGroup500>(
 groupId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionsForGroup>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionsForGroupInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPermissionsForGroup>>>, TError = GetPermissionsForGroup500>(
 groupId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPermissionsForGroupInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPermissionsForGroup>>>, TError = GetPermissionsForGroup500>(
 groupId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPermissionsForGroupInfiniteQueryOptions(groupId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPermissionsForGroupQueryOptions = <TData = Awaited<ReturnType<typeof getPermissionsForGroup>>, TError = GetPermissionsForGroup500>(groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPermissionsForGroupQueryKey(groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermissionsForGroup>>> = ({ signal }) => getPermissionsForGroup(groupId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(groupId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPermissionsForGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getPermissionsForGroup>>>
export type GetPermissionsForGroupQueryError = GetPermissionsForGroup500


export function useGetPermissionsForGroup<TData = Awaited<ReturnType<typeof getPermissionsForGroup>>, TError = GetPermissionsForGroup500>(
 groupId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionsForGroup>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionsForGroup<TData = Awaited<ReturnType<typeof getPermissionsForGroup>>, TError = GetPermissionsForGroup500>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionsForGroup>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionsForGroup<TData = Awaited<ReturnType<typeof getPermissionsForGroup>>, TError = GetPermissionsForGroup500>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPermissionsForGroup<TData = Awaited<ReturnType<typeof getPermissionsForGroup>>, TError = GetPermissionsForGroup500>(
 groupId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionsForGroup>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPermissionsForGroupQueryOptions(groupId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



