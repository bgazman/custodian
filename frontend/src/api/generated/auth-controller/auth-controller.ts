/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  Logout200,
  Logout500,
  LogoutRequest,
  Register200,
  Register500,
  UserRegistrationRequest,
  VerifyEmail200,
  VerifyEmail500,
  VerifyEmailParams
} from '../index.schemas'
import { customFetcher } from '../../common/SecureApiClient';



export const verifyEmail = (
    params: VerifyEmailParams,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<VerifyEmail200>(
      {url: `http://localhost:8080/api/auth/verify-email`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getVerifyEmailMutationOptions = <TData = Awaited<ReturnType<typeof verifyEmail>>, TError = VerifyEmail500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: VerifyEmailParams}, TContext>, }
) => {
const mutationKey = ['verifyEmail'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyEmail>>, {params: VerifyEmailParams}> = (props) => {
          const {params} = props ?? {};

          return  verifyEmail(params,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{params: VerifyEmailParams}, TContext>}

    export type VerifyEmailMutationResult = NonNullable<Awaited<ReturnType<typeof verifyEmail>>>
    
    export type VerifyEmailMutationError = VerifyEmail500

    export const useVerifyEmail = <TData = Awaited<ReturnType<typeof verifyEmail>>, TError = VerifyEmail500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{params: VerifyEmailParams}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {params: VerifyEmailParams},
        TContext
      > => {

      const mutationOptions = getVerifyEmailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const register = (
    userRegistrationRequest: UserRegistrationRequest,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<Register200>(
      {url: `http://localhost:8080/api/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userRegistrationRequest, signal
    },
      );
    }
  


export const getRegisterMutationOptions = <TData = Awaited<ReturnType<typeof register>>, TError = Register500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: UserRegistrationRequest}, TContext>, }
) => {
const mutationKey = ['register'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof register>>, {data: UserRegistrationRequest}> = (props) => {
          const {data} = props ?? {};

          return  register(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: UserRegistrationRequest}, TContext>}

    export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
    export type RegisterMutationBody = UserRegistrationRequest
    export type RegisterMutationError = Register500

    export const useRegister = <TData = Awaited<ReturnType<typeof register>>, TError = Register500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: UserRegistrationRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: UserRegistrationRequest},
        TContext
      > => {

      const mutationOptions = getRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const logout = (
    logoutRequest: LogoutRequest,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<Logout200>(
      {url: `http://localhost:8080/api/auth/logout`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: logoutRequest, signal
    },
      );
    }
  


export const getLogoutMutationOptions = <TData = Awaited<ReturnType<typeof logout>>, TError = Logout500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: LogoutRequest}, TContext>, }
) => {
const mutationKey = ['logout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, {data: LogoutRequest}> = (props) => {
          const {data} = props ?? {};

          return  logout(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: LogoutRequest}, TContext>}

    export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>
    export type LogoutMutationBody = LogoutRequest
    export type LogoutMutationError = Logout500

    export const useLogout = <TData = Awaited<ReturnType<typeof logout>>, TError = Logout500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: LogoutRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: LogoutRequest},
        TContext
      > => {

      const mutationOptions = getLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    