/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateSecret200,
  CreateSecret500,
  DeleteSecret200,
  DeleteSecret500,
  GetAllSecrets200,
  GetAllSecrets500,
  GetSecretById200,
  GetSecretById500,
  Secret,
  UpdateSecret200,
  UpdateSecret500
} from '.././model'
import { customFetcher } from '../../common/SecureApiClient';



export const getSecretById = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetSecretById200>(
      {url: `http://localhost:8080/api/secure/secrets/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetSecretByIdQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/secure/secrets/${id}`] as const;
    }

    
export const getGetSecretByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSecretById>>>, TError = GetSecretById500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSecretByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSecretById>>> = ({ signal }) => getSecretById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSecretByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSecretById>>>
export type GetSecretByIdInfiniteQueryError = GetSecretById500


export function useGetSecretByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSecretById>>>, TError = GetSecretById500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSecretById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSecretByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSecretById>>>, TError = GetSecretById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSecretById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSecretByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSecretById>>>, TError = GetSecretById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSecretByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSecretById>>>, TError = GetSecretById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSecretByIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSecretByIdQueryOptions = <TData = Awaited<ReturnType<typeof getSecretById>>, TError = GetSecretById500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSecretByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSecretById>>> = ({ signal }) => getSecretById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSecretByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSecretById>>>
export type GetSecretByIdQueryError = GetSecretById500


export function useGetSecretById<TData = Awaited<ReturnType<typeof getSecretById>>, TError = GetSecretById500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSecretById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSecretById<TData = Awaited<ReturnType<typeof getSecretById>>, TError = GetSecretById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSecretById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSecretById<TData = Awaited<ReturnType<typeof getSecretById>>, TError = GetSecretById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSecretById<TData = Awaited<ReturnType<typeof getSecretById>>, TError = GetSecretById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSecretById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSecretByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateSecret = (
    id: number,
    secret: Secret,
 ) => {
      
      
      return customFetcher<UpdateSecret200>(
      {url: `http://localhost:8080/api/secure/secrets/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: secret
    },
      );
    }
  


export const getUpdateSecretMutationOptions = <TData = Awaited<ReturnType<typeof updateSecret>>, TError = UpdateSecret500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: Secret}, TContext>, }
) => {
const mutationKey = ['updateSecret'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSecret>>, {id: number;data: Secret}> = (props) => {
          const {id,data} = props ?? {};

          return  updateSecret(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number;data: Secret}, TContext>}

    export type UpdateSecretMutationResult = NonNullable<Awaited<ReturnType<typeof updateSecret>>>
    export type UpdateSecretMutationBody = Secret
    export type UpdateSecretMutationError = UpdateSecret500

    export const useUpdateSecret = <TData = Awaited<ReturnType<typeof updateSecret>>, TError = UpdateSecret500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: Secret}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number;data: Secret},
        TContext
      > => {

      const mutationOptions = getUpdateSecretMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteSecret = (
    id: number,
 ) => {
      
      
      return customFetcher<DeleteSecret200>(
      {url: `http://localhost:8080/api/secure/secrets/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteSecretMutationOptions = <TData = Awaited<ReturnType<typeof deleteSecret>>, TError = DeleteSecret500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
) => {
const mutationKey = ['deleteSecret'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSecret>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteSecret(id,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number}, TContext>}

    export type DeleteSecretMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSecret>>>
    
    export type DeleteSecretMutationError = DeleteSecret500

    export const useDeleteSecret = <TData = Awaited<ReturnType<typeof deleteSecret>>, TError = DeleteSecret500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSecretMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getAllSecrets = (
    
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetAllSecrets200>(
      {url: `http://localhost:8080/api/secure/secrets`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllSecretsQueryKey = () => {
    return [`http://localhost:8080/api/secure/secrets`] as const;
    }

    
export const getGetAllSecretsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllSecrets>>>, TError = GetAllSecrets500>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllSecretsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSecrets>>> = ({ signal }) => getAllSecrets(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllSecretsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllSecrets>>>
export type GetAllSecretsInfiniteQueryError = GetAllSecrets500


export function useGetAllSecretsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllSecrets>>>, TError = GetAllSecrets500>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSecrets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllSecretsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllSecrets>>>, TError = GetAllSecrets500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSecrets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllSecretsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllSecrets>>>, TError = GetAllSecrets500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllSecretsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllSecrets>>>, TError = GetAllSecrets500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllSecretsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllSecretsQueryOptions = <TData = Awaited<ReturnType<typeof getAllSecrets>>, TError = GetAllSecrets500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllSecretsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSecrets>>> = ({ signal }) => getAllSecrets(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllSecretsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllSecrets>>>
export type GetAllSecretsQueryError = GetAllSecrets500


export function useGetAllSecrets<TData = Awaited<ReturnType<typeof getAllSecrets>>, TError = GetAllSecrets500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSecrets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllSecrets<TData = Awaited<ReturnType<typeof getAllSecrets>>, TError = GetAllSecrets500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSecrets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllSecrets<TData = Awaited<ReturnType<typeof getAllSecrets>>, TError = GetAllSecrets500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllSecrets<TData = Awaited<ReturnType<typeof getAllSecrets>>, TError = GetAllSecrets500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSecrets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllSecretsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createSecret = (
    secret: Secret,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<CreateSecret200>(
      {url: `http://localhost:8080/api/secure/secrets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: secret, signal
    },
      );
    }
  


export const getCreateSecretMutationOptions = <TData = Awaited<ReturnType<typeof createSecret>>, TError = CreateSecret500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: Secret}, TContext>, }
) => {
const mutationKey = ['createSecret'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSecret>>, {data: Secret}> = (props) => {
          const {data} = props ?? {};

          return  createSecret(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: Secret}, TContext>}

    export type CreateSecretMutationResult = NonNullable<Awaited<ReturnType<typeof createSecret>>>
    export type CreateSecretMutationBody = Secret
    export type CreateSecretMutationError = CreateSecret500

    export const useCreateSecret = <TData = Awaited<ReturnType<typeof createSecret>>, TError = CreateSecret500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: Secret}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: Secret},
        TContext
      > => {

      const mutationOptions = getCreateSecretMutationOptions(options);

      return useMutation(mutationOptions);
    }
    