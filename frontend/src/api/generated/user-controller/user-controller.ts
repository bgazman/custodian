/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateUser500,
  DeleteUser500,
  GetAllUsers500,
  GetUser500,
  GetUserAccess500,
  GetUserBasic500,
  GetUserByEmail500,
  GetUserProfile500,
  GetUserStatus500,
  UpdateUser500,
  UpdateUserAccess500,
  UpdateUserSecurity500,
  UpdateUserStatus500,
  UserAccessDTO,
  UserAccessUpdateRequest,
  UserBasicDTO,
  UserCreateRequest,
  UserDetailsDTO,
  UserProfileDTO,
  UserSecurityDTO,
  UserSecurityUpdateRequest,
  UserStatusDTO,
  UserStatusUpdateRequest,
  UserUpdateRequest
} from '.././model'
import { customFetcher } from '../../common/SecureApiClient';



export const getUser = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<UserDetailsDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/secure/users/${id}`] as const;
    }

    
export const getGetUserInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>, TError = GetUser500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserInfiniteQueryError = GetUser500


export function useGetUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>, TError = GetUser500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>, TError = GetUser500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>, TError = GetUser500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>, TError = GetUser500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = GetUser500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = GetUser500


export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = GetUser500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = GetUser500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = GetUser500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = GetUser500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateUser = (
    id: number,
    userUpdateRequest: UserUpdateRequest,
 ) => {
      
      
      return customFetcher<UserDetailsDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdateRequest
    },
      );
    }
  


export const getUpdateUserMutationOptions = <TData = Awaited<ReturnType<typeof updateUser>>, TError = UpdateUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: UserUpdateRequest}, TContext>, }
) => {
const mutationKey = ['updateUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {id: number;data: UserUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUser(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number;data: UserUpdateRequest}, TContext>}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = UserUpdateRequest
    export type UpdateUserMutationError = UpdateUser500

    export const useUpdateUser = <TData = Awaited<ReturnType<typeof updateUser>>, TError = UpdateUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: UserUpdateRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number;data: UserUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteUser = (
    id: number,
 ) => {
      
      
      return customFetcher<void>(
      {url: `http://localhost:8080/api/secure/users/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteUserMutationOptions = <TData = Awaited<ReturnType<typeof deleteUser>>, TError = DeleteUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
) => {
const mutationKey = ['deleteUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteUser(id,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number}, TContext>}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = DeleteUser500

    export const useDeleteUser = <TData = Awaited<ReturnType<typeof deleteUser>>, TError = DeleteUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getUserStatus = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<UserStatusDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}/status`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserStatusQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/secure/users/${id}/status`] as const;
    }

    
export const getGetUserStatusInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserStatus>>>, TError = GetUserStatus500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserStatusQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserStatus>>> = ({ signal }) => getUserStatus(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserStatusInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserStatus>>>
export type GetUserStatusInfiniteQueryError = GetUserStatus500


export function useGetUserStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserStatus>>>, TError = GetUserStatus500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatus>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserStatus>>>, TError = GetUserStatus500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatus>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserStatus>>>, TError = GetUserStatus500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserStatus>>>, TError = GetUserStatus500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserStatusInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserStatusQueryOptions = <TData = Awaited<ReturnType<typeof getUserStatus>>, TError = GetUserStatus500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserStatusQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserStatus>>> = ({ signal }) => getUserStatus(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getUserStatus>>>
export type GetUserStatusQueryError = GetUserStatus500


export function useGetUserStatus<TData = Awaited<ReturnType<typeof getUserStatus>>, TError = GetUserStatus500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatus>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatus<TData = Awaited<ReturnType<typeof getUserStatus>>, TError = GetUserStatus500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserStatus>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserStatus<TData = Awaited<ReturnType<typeof getUserStatus>>, TError = GetUserStatus500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserStatus<TData = Awaited<ReturnType<typeof getUserStatus>>, TError = GetUserStatus500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserStatus>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserStatusQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateUserStatus = (
    id: number,
    userStatusUpdateRequest: UserStatusUpdateRequest,
 ) => {
      
      
      return customFetcher<UserStatusDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}/status`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userStatusUpdateRequest
    },
      );
    }
  


export const getUpdateUserStatusMutationOptions = <TData = Awaited<ReturnType<typeof updateUserStatus>>, TError = UpdateUserStatus500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: UserStatusUpdateRequest}, TContext>, }
) => {
const mutationKey = ['updateUserStatus'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserStatus>>, {id: number;data: UserStatusUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUserStatus(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number;data: UserStatusUpdateRequest}, TContext>}

    export type UpdateUserStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserStatus>>>
    export type UpdateUserStatusMutationBody = UserStatusUpdateRequest
    export type UpdateUserStatusMutationError = UpdateUserStatus500

    export const useUpdateUserStatus = <TData = Awaited<ReturnType<typeof updateUserStatus>>, TError = UpdateUserStatus500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: UserStatusUpdateRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number;data: UserStatusUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateUserStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const updateUserSecurity = (
    id: number,
    userSecurityUpdateRequest: UserSecurityUpdateRequest,
 ) => {
      
      
      return customFetcher<UserSecurityDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}/security`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userSecurityUpdateRequest
    },
      );
    }
  


export const getUpdateUserSecurityMutationOptions = <TData = Awaited<ReturnType<typeof updateUserSecurity>>, TError = UpdateUserSecurity500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: UserSecurityUpdateRequest}, TContext>, }
) => {
const mutationKey = ['updateUserSecurity'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserSecurity>>, {id: number;data: UserSecurityUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUserSecurity(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number;data: UserSecurityUpdateRequest}, TContext>}

    export type UpdateUserSecurityMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserSecurity>>>
    export type UpdateUserSecurityMutationBody = UserSecurityUpdateRequest
    export type UpdateUserSecurityMutationError = UpdateUserSecurity500

    export const useUpdateUserSecurity = <TData = Awaited<ReturnType<typeof updateUserSecurity>>, TError = UpdateUserSecurity500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: UserSecurityUpdateRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number;data: UserSecurityUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateUserSecurityMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getUserAccess = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<UserAccessDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}/access`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserAccessQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/secure/users/${id}/access`] as const;
    }

    
export const getGetUserAccessInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserAccess>>>, TError = GetUserAccess500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserAccessQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserAccess>>> = ({ signal }) => getUserAccess(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserAccessInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserAccess>>>
export type GetUserAccessInfiniteQueryError = GetUserAccess500


export function useGetUserAccessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserAccess>>>, TError = GetUserAccess500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserAccess>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserAccessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserAccess>>>, TError = GetUserAccess500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserAccess>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserAccessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserAccess>>>, TError = GetUserAccess500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserAccessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserAccess>>>, TError = GetUserAccess500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserAccessInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserAccessQueryOptions = <TData = Awaited<ReturnType<typeof getUserAccess>>, TError = GetUserAccess500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserAccessQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserAccess>>> = ({ signal }) => getUserAccess(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getUserAccess>>>
export type GetUserAccessQueryError = GetUserAccess500


export function useGetUserAccess<TData = Awaited<ReturnType<typeof getUserAccess>>, TError = GetUserAccess500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserAccess>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserAccess<TData = Awaited<ReturnType<typeof getUserAccess>>, TError = GetUserAccess500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserAccess>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserAccess<TData = Awaited<ReturnType<typeof getUserAccess>>, TError = GetUserAccess500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserAccess<TData = Awaited<ReturnType<typeof getUserAccess>>, TError = GetUserAccess500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAccess>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserAccessQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateUserAccess = (
    id: number,
    userAccessUpdateRequest: UserAccessUpdateRequest,
 ) => {
      
      
      return customFetcher<UserAccessDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}/access`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userAccessUpdateRequest
    },
      );
    }
  


export const getUpdateUserAccessMutationOptions = <TData = Awaited<ReturnType<typeof updateUserAccess>>, TError = UpdateUserAccess500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: UserAccessUpdateRequest}, TContext>, }
) => {
const mutationKey = ['updateUserAccess'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserAccess>>, {id: number;data: UserAccessUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUserAccess(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number;data: UserAccessUpdateRequest}, TContext>}

    export type UpdateUserAccessMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserAccess>>>
    export type UpdateUserAccessMutationBody = UserAccessUpdateRequest
    export type UpdateUserAccessMutationError = UpdateUserAccess500

    export const useUpdateUserAccess = <TData = Awaited<ReturnType<typeof updateUserAccess>>, TError = UpdateUserAccess500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: UserAccessUpdateRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number;data: UserAccessUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateUserAccessMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getAllUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return customFetcher<UserBasicDTO[]>(
      {url: `http://localhost:8080/api/secure/users`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllUsersQueryKey = () => {
    return [`http://localhost:8080/api/secure/users`] as const;
    }

    
export const getGetAllUsersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllUsers>>>, TError = GetAllUsers500>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({ signal }) => getAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllUsersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUsers>>>
export type GetAllUsersInfiniteQueryError = GetAllUsers500


export function useGetAllUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllUsers>>>, TError = GetAllUsers500>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllUsers>>>, TError = GetAllUsers500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllUsers>>>, TError = GetAllUsers500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllUsers>>>, TError = GetAllUsers500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllUsersInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllUsersQueryOptions = <TData = Awaited<ReturnType<typeof getAllUsers>>, TError = GetAllUsers500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({ signal }) => getAllUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUsers>>>
export type GetAllUsersQueryError = GetAllUsers500


export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = GetAllUsers500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = GetAllUsers500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = GetAllUsers500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllUsers<TData = Awaited<ReturnType<typeof getAllUsers>>, TError = GetAllUsers500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createUser = (
    userCreateRequest: UserCreateRequest,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<UserDetailsDTO>(
      {url: `http://localhost:8080/api/secure/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreateRequest, signal
    },
      );
    }
  


export const getCreateUserMutationOptions = <TData = Awaited<ReturnType<typeof createUser>>, TError = CreateUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: UserCreateRequest}, TContext>, }
) => {
const mutationKey = ['createUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: UserCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: UserCreateRequest}, TContext>}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = UserCreateRequest
    export type CreateUserMutationError = CreateUser500

    export const useCreateUser = <TData = Awaited<ReturnType<typeof createUser>>, TError = CreateUser500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: UserCreateRequest}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: UserCreateRequest},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getUserProfile = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<UserProfileDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserProfileQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/secure/users/${id}/profile`] as const;
    }

    
export const getGetUserProfileInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserProfile>>>, TError = GetUserProfile500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserProfileQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = ({ signal }) => getUserProfile(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserProfileInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserProfileInfiniteQueryError = GetUserProfile500


export function useGetUserProfileInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserProfile>>>, TError = GetUserProfile500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProfile>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProfileInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserProfile>>>, TError = GetUserProfile500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProfile>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProfileInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserProfile>>>, TError = GetUserProfile500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserProfileInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserProfile>>>, TError = GetUserProfile500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserProfileInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof getUserProfile>>, TError = GetUserProfile500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserProfileQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = ({ signal }) => getUserProfile(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserProfileQueryError = GetUserProfile500


export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = GetUserProfile500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProfile>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = GetUserProfile500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProfile>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = GetUserProfile500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = GetUserProfile500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserProfileQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUserBasic = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<UserBasicDTO>(
      {url: `http://localhost:8080/api/secure/users/${id}/basic`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserBasicQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/secure/users/${id}/basic`] as const;
    }

    
export const getGetUserBasicInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserBasic>>>, TError = GetUserBasic500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserBasicQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserBasic>>> = ({ signal }) => getUserBasic(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserBasicInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserBasic>>>
export type GetUserBasicInfiniteQueryError = GetUserBasic500


export function useGetUserBasicInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserBasic>>>, TError = GetUserBasic500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserBasic>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserBasicInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserBasic>>>, TError = GetUserBasic500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserBasic>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserBasicInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserBasic>>>, TError = GetUserBasic500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserBasicInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserBasic>>>, TError = GetUserBasic500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserBasicInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserBasicQueryOptions = <TData = Awaited<ReturnType<typeof getUserBasic>>, TError = GetUserBasic500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserBasicQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserBasic>>> = ({ signal }) => getUserBasic(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserBasicQueryResult = NonNullable<Awaited<ReturnType<typeof getUserBasic>>>
export type GetUserBasicQueryError = GetUserBasic500


export function useGetUserBasic<TData = Awaited<ReturnType<typeof getUserBasic>>, TError = GetUserBasic500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserBasic>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserBasic<TData = Awaited<ReturnType<typeof getUserBasic>>, TError = GetUserBasic500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserBasic>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserBasic<TData = Awaited<ReturnType<typeof getUserBasic>>, TError = GetUserBasic500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserBasic<TData = Awaited<ReturnType<typeof getUserBasic>>, TError = GetUserBasic500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserBasic>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserBasicQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUserByEmail = (
    email: string,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<UserBasicDTO>(
      {url: `http://localhost:8080/api/secure/users/email/${email}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserByEmailQueryKey = (email: string,) => {
    return [`http://localhost:8080/api/secure/users/email/${email}`] as const;
    }

    
export const getGetUserByEmailInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserByEmail>>>, TError = GetUserByEmail500>(email: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByEmail>>> = ({ signal }) => getUserByEmail(email, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByEmailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByEmail>>>
export type GetUserByEmailInfiniteQueryError = GetUserByEmail500


export function useGetUserByEmailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByEmail>>>, TError = GetUserByEmail500>(
 email: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByEmail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByEmailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByEmail>>>, TError = GetUserByEmail500>(
 email: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByEmail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByEmailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByEmail>>>, TError = GetUserByEmail500>(
 email: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserByEmailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByEmail>>>, TError = GetUserByEmail500>(
 email: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByEmailInfiniteQueryOptions(email,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserByEmailQueryOptions = <TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = GetUserByEmail500>(email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByEmail>>> = ({ signal }) => getUserByEmail(email, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByEmail>>>
export type GetUserByEmailQueryError = GetUserByEmail500


export function useGetUserByEmail<TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = GetUserByEmail500>(
 email: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByEmail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByEmail<TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = GetUserByEmail500>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByEmail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByEmail<TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = GetUserByEmail500>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserByEmail<TData = Awaited<ReturnType<typeof getUserByEmail>>, TError = GetUserByEmail500>(
 email: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByEmail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByEmailQueryOptions(email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



