/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateGroup200,
  CreateGroup500,
  DeleteGroup200,
  DeleteGroup500,
  GetAllGroups200,
  GetAllGroups500,
  GetGroupById200,
  GetGroupById500,
  Group,
  SearchGroups200,
  SearchGroups500,
  SearchGroupsParams,
  UpdateGroup200,
  UpdateGroup500
} from '../index.schemas'
import { customFetcher } from '../../common/SecureApiClient';



export const getGroupById = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetGroupById200>(
      {url: `http://localhost:8080/api/secure/groups/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetGroupByIdQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/secure/groups/${id}`] as const;
    }

    
export const getGetGroupByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGroupById>>>, TError = GetGroupById500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupById>>> = ({ signal }) => getGroupById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGroupByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupById>>>
export type GetGroupByIdInfiniteQueryError = GetGroupById500


export function useGetGroupByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupById>>>, TError = GetGroupById500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupById>>>, TError = GetGroupById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupById>>>, TError = GetGroupById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetGroupByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGroupById>>>, TError = GetGroupById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGroupByIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGroupByIdQueryOptions = <TData = Awaited<ReturnType<typeof getGroupById>>, TError = GetGroupById500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupById>>> = ({ signal }) => getGroupById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGroupByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupById>>>
export type GetGroupByIdQueryError = GetGroupById500


export function useGetGroupById<TData = Awaited<ReturnType<typeof getGroupById>>, TError = GetGroupById500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupById<TData = Awaited<ReturnType<typeof getGroupById>>, TError = GetGroupById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroupById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroupById<TData = Awaited<ReturnType<typeof getGroupById>>, TError = GetGroupById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetGroupById<TData = Awaited<ReturnType<typeof getGroupById>>, TError = GetGroupById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroupById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGroupByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateGroup = (
    id: number,
    group: Group,
 ) => {
      
      
      return customFetcher<UpdateGroup200>(
      {url: `http://localhost:8080/api/secure/groups/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: group
    },
      );
    }
  


export const getUpdateGroupMutationOptions = <TData = Awaited<ReturnType<typeof updateGroup>>, TError = UpdateGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: Group}, TContext>, }
) => {
const mutationKey = ['updateGroup'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateGroup>>, {id: number;data: Group}> = (props) => {
          const {id,data} = props ?? {};

          return  updateGroup(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number;data: Group}, TContext>}

    export type UpdateGroupMutationResult = NonNullable<Awaited<ReturnType<typeof updateGroup>>>
    export type UpdateGroupMutationBody = Group
    export type UpdateGroupMutationError = UpdateGroup500

    export const useUpdateGroup = <TData = Awaited<ReturnType<typeof updateGroup>>, TError = UpdateGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: Group}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number;data: Group},
        TContext
      > => {

      const mutationOptions = getUpdateGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteGroup = (
    id: number,
 ) => {
      
      
      return customFetcher<DeleteGroup200>(
      {url: `http://localhost:8080/api/secure/groups/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteGroupMutationOptions = <TData = Awaited<ReturnType<typeof deleteGroup>>, TError = DeleteGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
) => {
const mutationKey = ['deleteGroup'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGroup>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteGroup(id,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number}, TContext>}

    export type DeleteGroupMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGroup>>>
    
    export type DeleteGroupMutationError = DeleteGroup500

    export const useDeleteGroup = <TData = Awaited<ReturnType<typeof deleteGroup>>, TError = DeleteGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getAllGroups = (
    
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetAllGroups200>(
      {url: `http://localhost:8080/api/secure/groups`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllGroupsQueryKey = () => {
    return [`http://localhost:8080/api/secure/groups`] as const;
    }

    
export const getGetAllGroupsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllGroups>>>, TError = GetAllGroups500>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllGroupsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllGroups>>> = ({ signal }) => getAllGroups(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllGroupsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllGroups>>>
export type GetAllGroupsInfiniteQueryError = GetAllGroups500


export function useGetAllGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllGroups>>>, TError = GetAllGroups500>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllGroups>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllGroups>>>, TError = GetAllGroups500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllGroups>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllGroups>>>, TError = GetAllGroups500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllGroups>>>, TError = GetAllGroups500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllGroupsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getAllGroups>>, TError = GetAllGroups500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllGroupsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllGroups>>> = ({ signal }) => getAllGroups(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllGroups>>>
export type GetAllGroupsQueryError = GetAllGroups500


export function useGetAllGroups<TData = Awaited<ReturnType<typeof getAllGroups>>, TError = GetAllGroups500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllGroups>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllGroups<TData = Awaited<ReturnType<typeof getAllGroups>>, TError = GetAllGroups500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllGroups>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllGroups<TData = Awaited<ReturnType<typeof getAllGroups>>, TError = GetAllGroups500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllGroups<TData = Awaited<ReturnType<typeof getAllGroups>>, TError = GetAllGroups500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllGroupsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createGroup = (
    group: Group,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<CreateGroup200>(
      {url: `http://localhost:8080/api/secure/groups`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: group, signal
    },
      );
    }
  


export const getCreateGroupMutationOptions = <TData = Awaited<ReturnType<typeof createGroup>>, TError = CreateGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: Group}, TContext>, }
) => {
const mutationKey = ['createGroup'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGroup>>, {data: Group}> = (props) => {
          const {data} = props ?? {};

          return  createGroup(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: Group}, TContext>}

    export type CreateGroupMutationResult = NonNullable<Awaited<ReturnType<typeof createGroup>>>
    export type CreateGroupMutationBody = Group
    export type CreateGroupMutationError = CreateGroup500

    export const useCreateGroup = <TData = Awaited<ReturnType<typeof createGroup>>, TError = CreateGroup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: Group}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: Group},
        TContext
      > => {

      const mutationOptions = getCreateGroupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const searchGroups = (
    params: SearchGroupsParams,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<SearchGroups200>(
      {url: `http://localhost:8080/api/secure/groups/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getSearchGroupsQueryKey = (params: SearchGroupsParams,) => {
    return [`http://localhost:8080/api/secure/groups/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchGroupsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchGroups>>>, TError = SearchGroups500>(params: SearchGroupsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchGroupsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchGroups>>> = ({ signal }) => searchGroups(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchGroupsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchGroups>>>
export type SearchGroupsInfiniteQueryError = SearchGroups500


export function useSearchGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchGroups>>>, TError = SearchGroups500>(
 params: SearchGroupsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchGroups>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchGroups>>>, TError = SearchGroups500>(
 params: SearchGroupsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchGroups>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchGroups>>>, TError = SearchGroups500>(
 params: SearchGroupsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchGroups>>>, TError = SearchGroups500>(
 params: SearchGroupsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchGroupsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchGroupsQueryOptions = <TData = Awaited<ReturnType<typeof searchGroups>>, TError = SearchGroups500>(params: SearchGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchGroupsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchGroups>>> = ({ signal }) => searchGroups(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof searchGroups>>>
export type SearchGroupsQueryError = SearchGroups500


export function useSearchGroups<TData = Awaited<ReturnType<typeof searchGroups>>, TError = SearchGroups500>(
 params: SearchGroupsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchGroups>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchGroups<TData = Awaited<ReturnType<typeof searchGroups>>, TError = SearchGroups500>(
 params: SearchGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchGroups>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchGroups<TData = Awaited<ReturnType<typeof searchGroups>>, TError = SearchGroups500>(
 params: SearchGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchGroups<TData = Awaited<ReturnType<typeof searchGroups>>, TError = SearchGroups500>(
 params: SearchGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchGroupsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



