/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CheckPermissionExists200,
  CheckPermissionExists500,
  CheckPermissionExistsParams,
  CreatePermission200,
  CreatePermission500,
  DeletePermission200,
  DeletePermission500,
  FindPermissionByName200,
  FindPermissionByName500,
  FindPermissionByNameParams,
  GetAllPermissions200,
  GetAllPermissions500,
  GetPermissionById200,
  GetPermissionById500,
  Permission,
  UpdatePermission200,
  UpdatePermission500
} from '.././model'
import { customFetcher } from '../../common/SecureApiClient';



export const getPermissionById = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetPermissionById200>(
      {url: `http://localhost:8080/api/permissions/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetPermissionByIdQueryKey = (id: number,) => {
    return [`http://localhost:8080/api/permissions/${id}`] as const;
    }

    
export const getGetPermissionByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getPermissionById>>>, TError = GetPermissionById500>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPermissionByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermissionById>>> = ({ signal }) => getPermissionById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPermissionByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPermissionById>>>
export type GetPermissionByIdInfiniteQueryError = GetPermissionById500


export function useGetPermissionByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPermissionById>>>, TError = GetPermissionById500>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPermissionById>>>, TError = GetPermissionById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPermissionById>>>, TError = GetPermissionById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPermissionByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPermissionById>>>, TError = GetPermissionById500>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPermissionByIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPermissionByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPermissionById>>, TError = GetPermissionById500>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPermissionByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermissionById>>> = ({ signal }) => getPermissionById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPermissionByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPermissionById>>>
export type GetPermissionByIdQueryError = GetPermissionById500


export function useGetPermissionById<TData = Awaited<ReturnType<typeof getPermissionById>>, TError = GetPermissionById500>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionById<TData = Awaited<ReturnType<typeof getPermissionById>>, TError = GetPermissionById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPermissionById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPermissionById<TData = Awaited<ReturnType<typeof getPermissionById>>, TError = GetPermissionById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPermissionById<TData = Awaited<ReturnType<typeof getPermissionById>>, TError = GetPermissionById500>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPermissionById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPermissionByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updatePermission = (
    id: number,
    permission: Permission,
 ) => {
      
      
      return customFetcher<UpdatePermission200>(
      {url: `http://localhost:8080/api/permissions/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: permission
    },
      );
    }
  


export const getUpdatePermissionMutationOptions = <TData = Awaited<ReturnType<typeof updatePermission>>, TError = UpdatePermission500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: Permission}, TContext>, }
) => {
const mutationKey = ['updatePermission'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePermission>>, {id: number;data: Permission}> = (props) => {
          const {id,data} = props ?? {};

          return  updatePermission(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number;data: Permission}, TContext>}

    export type UpdatePermissionMutationResult = NonNullable<Awaited<ReturnType<typeof updatePermission>>>
    export type UpdatePermissionMutationBody = Permission
    export type UpdatePermissionMutationError = UpdatePermission500

    export const useUpdatePermission = <TData = Awaited<ReturnType<typeof updatePermission>>, TError = UpdatePermission500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number;data: Permission}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number;data: Permission},
        TContext
      > => {

      const mutationOptions = getUpdatePermissionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deletePermission = (
    id: number,
 ) => {
      
      
      return customFetcher<DeletePermission200>(
      {url: `http://localhost:8080/api/permissions/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeletePermissionMutationOptions = <TData = Awaited<ReturnType<typeof deletePermission>>, TError = DeletePermission500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
) => {
const mutationKey = ['deletePermission'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePermission>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deletePermission(id,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{id: number}, TContext>}

    export type DeletePermissionMutationResult = NonNullable<Awaited<ReturnType<typeof deletePermission>>>
    
    export type DeletePermissionMutationError = DeletePermission500

    export const useDeletePermission = <TData = Awaited<ReturnType<typeof deletePermission>>, TError = DeletePermission500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: number}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeletePermissionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getAllPermissions = (
    
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetAllPermissions200>(
      {url: `http://localhost:8080/api/permissions`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllPermissionsQueryKey = () => {
    return [`http://localhost:8080/api/permissions`] as const;
    }

    
export const getGetAllPermissionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllPermissions>>>, TError = GetAllPermissions500>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllPermissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPermissions>>> = ({ signal }) => getAllPermissions(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllPermissionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllPermissions>>>
export type GetAllPermissionsInfiniteQueryError = GetAllPermissions500


export function useGetAllPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllPermissions>>>, TError = GetAllPermissions500>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPermissions>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllPermissions>>>, TError = GetAllPermissions500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPermissions>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllPermissions>>>, TError = GetAllPermissions500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllPermissions>>>, TError = GetAllPermissions500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllPermissionsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAllPermissions>>, TError = GetAllPermissions500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllPermissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPermissions>>> = ({ signal }) => getAllPermissions(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllPermissions>>>
export type GetAllPermissionsQueryError = GetAllPermissions500


export function useGetAllPermissions<TData = Awaited<ReturnType<typeof getAllPermissions>>, TError = GetAllPermissions500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPermissions>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPermissions<TData = Awaited<ReturnType<typeof getAllPermissions>>, TError = GetAllPermissions500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPermissions>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPermissions<TData = Awaited<ReturnType<typeof getAllPermissions>>, TError = GetAllPermissions500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllPermissions<TData = Awaited<ReturnType<typeof getAllPermissions>>, TError = GetAllPermissions500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPermissions>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllPermissionsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createPermission = (
    permission: Permission,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<CreatePermission200>(
      {url: `http://localhost:8080/api/permissions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: permission, signal
    },
      );
    }
  


export const getCreatePermissionMutationOptions = <TData = Awaited<ReturnType<typeof createPermission>>, TError = CreatePermission500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: Permission}, TContext>, }
) => {
const mutationKey = ['createPermission'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPermission>>, {data: Permission}> = (props) => {
          const {data} = props ?? {};

          return  createPermission(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: Permission}, TContext>}

    export type CreatePermissionMutationResult = NonNullable<Awaited<ReturnType<typeof createPermission>>>
    export type CreatePermissionMutationBody = Permission
    export type CreatePermissionMutationError = CreatePermission500

    export const useCreatePermission = <TData = Awaited<ReturnType<typeof createPermission>>, TError = CreatePermission500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: Permission}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: Permission},
        TContext
      > => {

      const mutationOptions = getCreatePermissionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const findPermissionByName = (
    params: FindPermissionByNameParams,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<FindPermissionByName200>(
      {url: `http://localhost:8080/api/permissions/search`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getFindPermissionByNameQueryKey = (params: FindPermissionByNameParams,) => {
    return [`http://localhost:8080/api/permissions/search`, ...(params ? [params]: [])] as const;
    }

    
export const getFindPermissionByNameInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findPermissionByName>>>, TError = FindPermissionByName500>(params: FindPermissionByNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPermissionByNameQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPermissionByName>>> = ({ signal }) => findPermissionByName(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindPermissionByNameInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findPermissionByName>>>
export type FindPermissionByNameInfiniteQueryError = FindPermissionByName500


export function useFindPermissionByNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findPermissionByName>>>, TError = FindPermissionByName500>(
 params: FindPermissionByNameParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPermissionByName>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindPermissionByNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findPermissionByName>>>, TError = FindPermissionByName500>(
 params: FindPermissionByNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPermissionByName>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindPermissionByNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findPermissionByName>>>, TError = FindPermissionByName500>(
 params: FindPermissionByNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindPermissionByNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findPermissionByName>>>, TError = FindPermissionByName500>(
 params: FindPermissionByNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindPermissionByNameInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindPermissionByNameQueryOptions = <TData = Awaited<ReturnType<typeof findPermissionByName>>, TError = FindPermissionByName500>(params: FindPermissionByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPermissionByNameQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPermissionByName>>> = ({ signal }) => findPermissionByName(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindPermissionByNameQueryResult = NonNullable<Awaited<ReturnType<typeof findPermissionByName>>>
export type FindPermissionByNameQueryError = FindPermissionByName500


export function useFindPermissionByName<TData = Awaited<ReturnType<typeof findPermissionByName>>, TError = FindPermissionByName500>(
 params: FindPermissionByNameParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPermissionByName>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindPermissionByName<TData = Awaited<ReturnType<typeof findPermissionByName>>, TError = FindPermissionByName500>(
 params: FindPermissionByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPermissionByName>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindPermissionByName<TData = Awaited<ReturnType<typeof findPermissionByName>>, TError = FindPermissionByName500>(
 params: FindPermissionByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindPermissionByName<TData = Awaited<ReturnType<typeof findPermissionByName>>, TError = FindPermissionByName500>(
 params: FindPermissionByNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPermissionByName>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindPermissionByNameQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const checkPermissionExists = (
    params: CheckPermissionExistsParams,
 signal?: AbortSignal
) => {
      
      
      return customFetcher<CheckPermissionExists200>(
      {url: `http://localhost:8080/api/permissions/exists`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCheckPermissionExistsQueryKey = (params: CheckPermissionExistsParams,) => {
    return [`http://localhost:8080/api/permissions/exists`, ...(params ? [params]: [])] as const;
    }

    
export const getCheckPermissionExistsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof checkPermissionExists>>>, TError = CheckPermissionExists500>(params: CheckPermissionExistsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckPermissionExistsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkPermissionExists>>> = ({ signal }) => checkPermissionExists(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CheckPermissionExistsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof checkPermissionExists>>>
export type CheckPermissionExistsInfiniteQueryError = CheckPermissionExists500


export function useCheckPermissionExistsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof checkPermissionExists>>>, TError = CheckPermissionExists500>(
 params: CheckPermissionExistsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkPermissionExists>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCheckPermissionExistsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof checkPermissionExists>>>, TError = CheckPermissionExists500>(
 params: CheckPermissionExistsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkPermissionExists>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCheckPermissionExistsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof checkPermissionExists>>>, TError = CheckPermissionExists500>(
 params: CheckPermissionExistsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCheckPermissionExistsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof checkPermissionExists>>>, TError = CheckPermissionExists500>(
 params: CheckPermissionExistsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCheckPermissionExistsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCheckPermissionExistsQueryOptions = <TData = Awaited<ReturnType<typeof checkPermissionExists>>, TError = CheckPermissionExists500>(params: CheckPermissionExistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckPermissionExistsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkPermissionExists>>> = ({ signal }) => checkPermissionExists(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CheckPermissionExistsQueryResult = NonNullable<Awaited<ReturnType<typeof checkPermissionExists>>>
export type CheckPermissionExistsQueryError = CheckPermissionExists500


export function useCheckPermissionExists<TData = Awaited<ReturnType<typeof checkPermissionExists>>, TError = CheckPermissionExists500>(
 params: CheckPermissionExistsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkPermissionExists>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCheckPermissionExists<TData = Awaited<ReturnType<typeof checkPermissionExists>>, TError = CheckPermissionExists500>(
 params: CheckPermissionExistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkPermissionExists>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCheckPermissionExists<TData = Awaited<ReturnType<typeof checkPermissionExists>>, TError = CheckPermissionExists500>(
 params: CheckPermissionExistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCheckPermissionExists<TData = Awaited<ReturnType<typeof checkPermissionExists>>, TError = CheckPermissionExists500>(
 params: CheckPermissionExistsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkPermissionExists>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCheckPermissionExistsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



