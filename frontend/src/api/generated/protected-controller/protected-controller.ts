/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Your API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetProtectedData200,
  GetProtectedData500
} from '../index.schemas'
import { customFetcher } from '../../common/SecureApiClient';



export const getProtectedData = (
    
 signal?: AbortSignal
) => {
      
      
      return customFetcher<GetProtectedData200>(
      {url: `http://localhost:8080/api/secure/data`, method: 'GET', signal
    },
      );
    }
  

export const getGetProtectedDataQueryKey = () => {
    return [`http://localhost:8080/api/secure/data`] as const;
    }

    
export const getGetProtectedDataInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProtectedData>>>, TError = GetProtectedData500>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProtectedDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProtectedData>>> = ({ signal }) => getProtectedData(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProtectedDataInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProtectedData>>>
export type GetProtectedDataInfiniteQueryError = GetProtectedData500


export function useGetProtectedDataInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProtectedData>>>, TError = GetProtectedData500>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProtectedData>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProtectedDataInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProtectedData>>>, TError = GetProtectedData500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProtectedData>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProtectedDataInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProtectedData>>>, TError = GetProtectedData500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProtectedDataInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProtectedData>>>, TError = GetProtectedData500>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProtectedDataInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProtectedDataQueryOptions = <TData = Awaited<ReturnType<typeof getProtectedData>>, TError = GetProtectedData500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProtectedDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProtectedData>>> = ({ signal }) => getProtectedData(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProtectedDataQueryResult = NonNullable<Awaited<ReturnType<typeof getProtectedData>>>
export type GetProtectedDataQueryError = GetProtectedData500


export function useGetProtectedData<TData = Awaited<ReturnType<typeof getProtectedData>>, TError = GetProtectedData500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProtectedData>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProtectedData<TData = Awaited<ReturnType<typeof getProtectedData>>, TError = GetProtectedData500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProtectedData>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProtectedData<TData = Awaited<ReturnType<typeof getProtectedData>>, TError = GetProtectedData500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProtectedData<TData = Awaited<ReturnType<typeof getProtectedData>>, TError = GetProtectedData500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProtectedData>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProtectedDataQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



